import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.token import TokenValidationError
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '8086883247:AAGJFU9l44ZaA0noRX3QPAbtpxTFuzkSh0M'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("bot_database.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        invited_by INTEGER,
        stars REAL DEFAULT 0,
        bonus_given INTEGER DEFAULT 0  -- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    )
    """
)

cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS channels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        channel_id TEXT UNIQUE,
        channel_url TEXT,
        button_name TEXT  -- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    )
    """
)

conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    withdraw_amount = State()
    broadcast_message = State()
    add_channel_id = State()
    add_channel_url = State()
    add_channel_button_name = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    remove_channel = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="get_stars"),
        types.InlineKeyboardButton(text="‚≠êÔ∏è –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw_stars"),
    )
    builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    await message.answer(
        "‚≠êÔ∏è <b>Lonely Stars</b> - <i> –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –ª—é–¥–µ–π.</i>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username),
        )
        conn.commit()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if len(message.text.split()) > 1:
            referrer_id = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º user_id –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (referrer_id,))
            referrer = cursor.fetchone()
            if referrer:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã
                cursor.execute("UPDATE users SET invited_by = ? WHERE user_id = ?", (referrer_id, user_id))
                conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels")
    channels = cursor.fetchall()

    if not channels:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    all_subscribed = True
    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(channel_id, user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            all_subscribed = False
            break

    if all_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        keyboard = InlineKeyboardBuilder()
        for channel in channels:
            button_name = channel[2]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            keyboard.row(types.InlineKeyboardButton(text=button_name, url=channel[1]))
        keyboard.row(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=keyboard.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(lambda c: c.data == "check_subscription")
async def process_callback_check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels")
    channels = cursor.fetchall()
    all_subscribed = True  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã

    for channel in channels:
        channel_id = channel[0]
        try:
            chat_member = await bot.get_chat_member(channel_id, user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            all_subscribed = False
            break

    if all_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback_query.message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        cursor.execute("SELECT invited_by, bonus_given FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        referrer_id = result[0]
        bonus_given = result[1]

        if referrer_id and not bonus_given:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            cursor.execute("UPDATE users SET stars = stars + 0.5 WHERE user_id = ?", (referrer_id,))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ–Ω—É—Å –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω
            cursor.execute("UPDATE users SET bonus_given = 1 WHERE user_id = ?", (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            await bot.send_message(
                referrer_id,
                f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0.5 –∑–≤–µ–∑–¥.",
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        keyboard = InlineKeyboardBuilder()
        for channel in channels:
            button_name = channel[2]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            keyboard.row(types.InlineKeyboardButton(text=button_name, url=channel[1]))
        keyboard.row(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        await callback_query.answer(
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':",
            reply_markup=keyboard.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == "get_stars")
async def process_callback_get_stars(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
    stars = cursor.fetchone()[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = (await bot.get_me()).username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]])

    await callback_query.answer()
    await callback_query.message.edit_text(
        f"<b>‚≠êÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –ª—é–¥–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. \n\n ‚îî‚î¨üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>\n ‚îî‚î¨‚≠êÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{stars}</code> –∑–≤–µ–∑–¥.</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "withdraw_stars")
async def process_callback_withdraw_stars(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
    stars = cursor.fetchone()[0]

    if stars < 50:
        await callback_query.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ 50 –∑–≤–µ–∑–¥.", show_alert=True)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]])

        await callback_query.answer()
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard)
        await state.set_state(Form.withdraw_amount)

@dp.message(Form.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    try:
        withdraw_amount = float(message.text)
        cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
        stars = cursor.fetchone()[0]

        if withdraw_amount > stars:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        else:
            cursor.execute("UPDATE users SET stars = stars - ? WHERE user_id = ?", (withdraw_amount, user_id))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–≤—ã–≤–µ–¥–µ–Ω–æ"
            admin_id = 5441539026  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í—ã–≤–µ–¥–µ–Ω–æ", callback_data=f"withdrawn_{user_id}_{withdraw_amount}")]])
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –≤—ã–≤–µ–ª {withdraw_amount} –∑–≤–µ–∑–¥.",
                reply_markup=keyboard
            )

            await message.reply(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {withdraw_amount} –∑–≤–µ–∑–¥.</b> \n\n‚≠êÔ∏è<i> –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.</i>", parse_mode="HTML")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("withdrawn_"))
async def process_callback_withdrawn(callback_query: types.CallbackQuery):
    data = callback_query.data.split("_")
    user_id = int(data[1])
    withdraw_amount = float(data[2])

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(user_id, f"<b>‚≠êÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ {withdraw_amount} –∑–≤–µ–∑–¥.</b>", parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "stats")
async def process_callback_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    bot_username = (await bot.get_me()).username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    cursor.execute(
        "SELECT stars, (SELECT COUNT(*) FROM users WHERE invited_by = ?) FROM users WHERE user_id = ?",
        (user_id, user_id),
    )
    stats = cursor.fetchone()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]])

    await callback_query.answer()
    await callback_query.message.edit_text(
        f"<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚îåüåê <b>C—Å—ã–ª–∫–∞:</b> <code>{referral_link}</code>\n"
        f"‚îî‚î¨üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n"
        f"  ‚îî‚î¨üë§ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>: <code>{stats[1]}</code>\n"
        f"  ‚îî‚î¨‚≠êÔ∏è <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–µ–∑–¥:</b> <code>{stats[1] * 0.6}</code>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "main_menu")
async def process_callback_main_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "‚≠êÔ∏è <b>Lonely Stars</b> - <i> –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –ª—é–¥–µ–π.</i>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    user_id = message.from_user.id
    if user_id != 5441539026:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
    )
    builder.row(types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"))

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–ö–∞–Ω–∞–ª—ã"
@dp.callback_query(lambda c: c.data == "admin_channels")
async def process_callback_admin_channels(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã", callback_data="admin_current_channels"),
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_add_channel"),
    )
    builder.row(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_remove_channel"))

    await callback_query.answer()
    await callback_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã"
@dp.callback_query(lambda c: c.data == "admin_current_channels")
async def process_callback_admin_current_channels(callback_query: types.CallbackQuery):
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels")
    channels = cursor.fetchall()

    if not channels:
        await callback_query.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.row(types.InlineKeyboardButton(text=channel[2], callback_data=f"channel_info_{channel[0]}"))

    await callback_query.answer()
    await callback_query.message.edit_text("–¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
@dp.callback_query(lambda c: c.data.startswith("channel_info_"))
async def process_callback_channel_info(callback_query: types.CallbackQuery):
    channel_id = callback_query.data.split("_")[2]
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels WHERE channel_id = ?", (channel_id,))
    channel = cursor.fetchone()

    if channel:
        await callback_query.answer()
        await callback_query.message.edit_text(f"ID –∫–∞–Ω–∞–ª–∞: {channel[0]}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {channel[2]}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
@dp.callback_query(lambda c: c.data == "admin_add_channel")
async def process_callback_admin_add_channel(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(Form.add_channel_id)

@dp.message(Form.add_channel_id)
async def process_add_channel_id(message: types.Message, state: FSMContext):
    channel_id = message.text
    await state.update_data(channel_id=channel_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    await state.set_state(Form.add_channel_url)

@dp.message(Form.add_channel_url)
async def process_add_channel_url(message: types.Message, state: FSMContext):
    channel_url = message.text
    await state.update_data(channel_url=channel_url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(Form.add_channel_button_name)

@dp.message(Form.add_channel_button_name)
async def process_add_channel_button_name(message: types.Message, state: FSMContext):
    button_name = message.text
    data = await state.get_data()
    channel_id = data.get("channel_id")
    channel_url = data.get("channel_url")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
    cursor.execute(
        "INSERT INTO channels (channel_id, channel_url, button_name) VALUES (?, ?, ?)",
        (channel_id, channel_url, button_name),
    )
    conn.commit()

    await message.answer(f"–ö–∞–Ω–∞–ª {channel_url} —Å –∫–Ω–æ–ø–∫–æ–π '{button_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"
@dp.callback_query(lambda c: c.data == "admin_remove_channel")
async def process_callback_admin_remove_channel(callback_query: types.CallbackQuery):
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels")
    channels = cursor.fetchall()

    if not channels:
        await callback_query.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.row(types.InlineKeyboardButton(text=channel[2], callback_data=f"remove_channel_{channel[0]}"))

    await callback_query.answer()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@dp.callback_query(lambda c: c.data.startswith("remove_channel_"))
async def process_callback_remove_channel(callback_query: types.CallbackQuery):
    channel_id = callback_query.data.split("_")[2]
    cursor.execute("DELETE FROM channels WHERE channel_id = ?", (channel_id,))
    conn.commit()

    await callback_query.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await callback_query.message.edit_text("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(lambda c: c.data == "admin_stats")
async def process_callback_admin_stats(callback_query: types.CallbackQuery):
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(stars) FROM users")
    total_stars = cursor.fetchone()[0] or 0

    await callback_query.answer()
    await callback_query.message.edit_text(
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {total_stars}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query(lambda c: c.data == "admin_broadcast")
async def process_callback_admin_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Form.broadcast_message)

@dp.message(Form.broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    broadcast_text = message.text

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    for user in users:
        try:
            await bot.send_message(user[0], broadcast_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
