import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.token import TokenValidationError
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = '8086883247:AAGJFU9l44ZaA0noRX3QPAbtpxTFuzkSh0M'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("bot_database.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        invited_by INTEGER,
        stars REAL DEFAULT 0,
        bonus_given INTEGER DEFAULT 0
    )
    """
)

cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS channels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        channel_id TEXT UNIQUE,
        channel_url TEXT,
        button_name TEXT
    )
    """
)

conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    withdraw_amount = State()
    broadcast_message = State()
    add_channel_id = State()
    add_channel_url = State()
    add_channel_button_name = State()
    remove_channel = State()
    search_user = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="get_stars"),
        types.InlineKeyboardButton(text="‚≠êÔ∏è –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw_stars"),
    )
    builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    builder.row(types.InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/lonelyerik"))
    return builder.as_markup()

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    await message.answer(
        "üåü <b>Lonely Stars</b> - <i>–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –ª—é–¥–µ–π.</i>\n\n"
        "‚îåüí¥ <b>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ:</b> <code>0.6</code> –∑–≤—ë–∑–¥\n"
        "‚îîüíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username),
        )
        conn.commit()

        if len(message.text.split()) > 1:
            referrer_id = int(message.text.split()[1])
            cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (referrer_id,))
            referrer = cursor.fetchone()
            if referrer:
                cursor.execute("UPDATE users SET invited_by = ? WHERE user_id = ?", (referrer_id, user_id))
                conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    await check_subscription(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(message: types.Message):
    cursor.execute("SELECT channel_id, channel_url, button_name FROM channels")
    channels = cursor.fetchall()

    if not channels:
        await show_main_menu(message)
        return

    user_id = message.from_user.id
    all_subscribed = True
    for channel in channels:
        try:
            chat_member = await bot.get_chat_member(channel[0], user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            all_subscribed = False

    if all_subscribed:
        await show_main_menu(message)
        await check_referral_bonus(user_id, message.from_user.username)
    else:
        await send_subscription_request(message, channels)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
async def send_subscription_request(message: types.Message, channels):
    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.row(types.InlineKeyboardButton(
            text=f"üîî {channel[2]}", 
            url=channel[1]
        ))
    builder.row(types.InlineKeyboardButton(
        text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", 
        callback_data="check_subscription"
    ))
    
    await message.answer(
        "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async def check_referral_bonus(user_id, username):
    cursor.execute("SELECT invited_by, bonus_given FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result and result[0] and not result[1]:
        cursor.execute("UPDATE users SET stars = stars + 0.5 WHERE user_id = ?", (result[0],))
        cursor.execute("UPDATE users SET bonus_given = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        await bot.send_message(
            result[0],
            f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @{username}! –ù–∞—á–∏—Å–ª–µ–Ω–æ 0.5 –∑–≤—ë–∑–¥."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data == "check_subscription")
async def process_check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT channel_id FROM channels")
    channels = cursor.fetchall()
    
    all_subscribed = True
    for channel in channels:
        try:
            chat_member = await bot.get_chat_member(channel[0], user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                all_subscribed = False
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            all_subscribed = False

    if all_subscribed:
        await show_main_menu(callback.message)
        await check_referral_bonus(user_id, callback.from_user.username)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        await send_subscription_request(callback.message, channels)

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == "admin_search")
async def admin_search_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Form.search_user)

@dp.message(Form.search_user)
async def process_search_user(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        cursor.execute(
            "SELECT stars, (SELECT COUNT(*) FROM users WHERE invited_by = ?) FROM users WHERE user_id = ?",
            (user_id, user_id)
        )
        data = cursor.fetchone()
        if data:
            await message.answer(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\n"
                f"‚≠êÔ∏è –ó–≤—ë–∑–¥—ã: {data[0]}\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {data[1]}"
            )
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
    await state.clear()

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id != 5441539026:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
    )
    builder.row(
        types.InlineKeyboardButton(text="üìå –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_search"),
    )
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=builder.as_markup())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (withdraw, stats, broadcast –∏ —Ç.–¥.)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
